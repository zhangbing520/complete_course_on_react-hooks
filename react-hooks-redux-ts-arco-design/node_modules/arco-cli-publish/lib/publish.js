"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const relix_1 = __importDefault(require("relix"));
const semver_1 = __importDefault(require("semver"));
const inquirer_1 = __importDefault(require("inquirer"));
const arco_cli_config_1 = require("arco-cli-config");
const arco_cli_dev_utils_1 = require("arco-cli-dev-utils");
const locale_1 = __importDefault(require("./locale"));
function checkGitRemote() {
    return __awaiter(this, void 0, void 0, function* () {
        if ((0, arco_cli_dev_utils_1.getGitRootPath)()) {
            const { code, stdout } = yield (0, arco_cli_dev_utils_1.execQuick)('git remote -v');
            if (code === 0 && stdout.match('(push)')) {
                (0, arco_cli_dev_utils_1.print)();
            }
            else {
                arco_cli_dev_utils_1.print.error(['arco publish'], locale_1.default.ERROR_NO_GIT_ORIGIN);
                process.exit();
            }
        }
        else {
            arco_cli_dev_utils_1.print.error(['arco publish'], locale_1.default.ERROR_NO_GIT_INIT);
            process.exit();
        }
    });
}
function default_1({ configFileName } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { alias, packages } = (0, arco_cli_config_1.getConfig)(configFileName);
        if (alias && alias.publish) {
            const { code, stderr } = yield (0, arco_cli_dev_utils_1.execQuick)(alias.publish, { silent: false, time: true });
            if (code !== 0) {
                arco_cli_dev_utils_1.print.error(['[arco publish]', locale_1.default.ERROR_EXECUTED_FAILED]);
                console.error(stderr);
                process.exit(code);
            }
        }
        if (Array.isArray(packages) && packages.length > 1) {
            arco_cli_dev_utils_1.print.error('[arco publish]', locale_1.default.ERROR_IN_MONOREPO);
            process.exit();
        }
        yield checkGitRemote();
        const versionTypes = ['patch', 'minor', 'major'];
        const preVersionTypes = ['prepatch', 'preminor', 'premajor'];
        const { version } = fs_extra_1.default.readJsonSync('./package.json');
        const questions = [
            {
                type: 'list',
                name: 'type',
                message: locale_1.default.TIP_SELECT_RELEASE_TYPE,
                choices: [...versionTypes, ...preVersionTypes].map((x) => {
                    return {
                        name: `${x} ( ${semver_1.default.inc(version, x, 'beta')} )`,
                        value: x,
                    };
                }),
            },
            {
                type: 'input',
                name: 'identifier',
                default: 'beta',
                message: locale_1.default.TIP_INPUT_RELEASE_TAG,
                when: (answers) => preVersionTypes.indexOf(answers.type) > -1,
            },
            {
                type: 'input',
                name: 'remote',
                default: 'origin/master',
                message: locale_1.default.TIP_INPUT_REMOTE_BRANCH,
            },
        ];
        try {
            const { type, identifier, remote } = yield inquirer_1.default.prompt(questions);
            const options = {
                [type]: true,
                identifier,
            };
            if (remote) {
                options.remote = remote;
            }
            yield (0, relix_1.default)(options);
            arco_cli_dev_utils_1.print.success(locale_1.default.TIP_PUBLISH_SUCCESS);
        }
        catch (err) {
            (0, arco_cli_dev_utils_1.print)(err);
            process.exit(1);
        }
    });
}
exports.default = default_1;
