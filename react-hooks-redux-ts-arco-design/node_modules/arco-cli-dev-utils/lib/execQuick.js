"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const print_1 = __importDefault(require("./print"));
function execQuick(command, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve) => {
            const silent = options.silent !== false;
            const begin = new Date().getTime();
            const result = {
                pid: null,
                code: null,
                stdout: '',
                stderr: '',
            };
            const { stdout, stderr, pid } = (0, child_process_1.spawn)(command, [], {
                shell: true,
                cwd: options.cwd,
            }).on('close', (code) => {
                if (options.time) {
                    const end = new Date().getTime();
                    const waste = ((end - begin) / 1000).toFixed(2);
                    print_1.default.info(command, `Command executed in ${waste} ms.`);
                }
                if (code !== 0 && !silent) {
                    print_1.default.error(command, 'Command executed failed');
                }
                result.code = code;
                resolve(result);
            });
            result.pid = pid;
            stdout.on('data', (data) => {
                const dataStr = data.toString();
                if (!silent) {
                    print_1.default.info(dataStr);
                }
                result.stdout += dataStr;
            });
            stderr.on('data', (data) => {
                const dataStr = data.toString();
                if (!silent) {
                    print_1.default.error(dataStr);
                }
                result.stderr += dataStr;
            });
        });
    });
}
exports.default = execQuick;
