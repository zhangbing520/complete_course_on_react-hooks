"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformToTemplate = exports.transformToProject = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const gulp_1 = __importDefault(require("gulp"));
const gulp_replace_1 = __importDefault(require("gulp-replace"));
const execQuick_1 = __importDefault(require("./execQuick"));
const constant_1 = require("./constant");
const PLACEHOLDER_PACKAGE_NAME = '@CONST_PACKAGE_NAME@';
const PLACEHOLDER_ARCO_PACKAGE_NAME = '@CONST_ARCO_PACKAGE_NAME@';
const PLACEHOLDER_ARCO_CSS_NAME = '@CONST_ARCO_DIST_CSS_NAME@';
const ARCO_PACKAGE_INFO_MAP = {
    react: {
        name: constant_1.PACKAGE_NAME_ARCO_WEB_REACT_V2,
        distCssName: 'arco.css',
    },
    vue: {
        name: constant_1.PACKAGE_NAME_ARCO_WEB_VUE_V2,
        distCssName: 'arco.css',
    },
};
/**
 * handle [files] in package.json
 * @param {Object} packageJson
 * @param {boolean} toProject
 */
const handlePackageJsonFiles = (packageJson, toProject) => {
    if (toProject) {
        if (packageJson._files) {
            packageJson.files = packageJson._files;
            delete packageJson._files;
        }
    }
    else {
        if (packageJson.files) {
            packageJson._files = packageJson.files;
            delete packageJson.files;
        }
        delete packageJson.arcoMeta;
    }
};
const transformToProject = ({ root, packageJson: packageJsonToExtend, }) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const packageJson = fs_extra_1.default.readJsonSync('./package.json');
    // Extend package.json
    Object.assign(packageJson, packageJsonToExtend);
    handlePackageJsonFiles(packageJson, true);
    fs_extra_1.default.writeJsonSync('./package.json', packageJson, { spaces: 2 });
    const isVue = !!((_a = packageJson.peerDependencies) === null || _a === void 0 ? void 0 : _a.vue);
    const arcoPackageInfo = ARCO_PACKAGE_INFO_MAP[isVue ? 'vue' : 'react'];
    // Replace constant
    yield new Promise((resolve, reject) => {
        gulp_1.default
            .src(['**/*', '.config/*', '.storybook/*'], {
            base: root,
            allowEmpty: true,
        })
            .pipe((0, gulp_replace_1.default)(/@CONST_[^@]*@/g, (str) => {
            switch (str) {
                case PLACEHOLDER_PACKAGE_NAME:
                    return packageJson.name;
                case PLACEHOLDER_ARCO_PACKAGE_NAME:
                    return arcoPackageInfo.name;
                case PLACEHOLDER_ARCO_CSS_NAME:
                    return arcoPackageInfo.distCssName;
                default:
                    return str;
            }
        }))
            .pipe(gulp_1.default.dest(root))
            .on('end', resolve)
            .on('error', reject);
    });
});
exports.transformToProject = transformToProject;
const transformToTemplate = ({ root }) => __awaiter(void 0, void 0, void 0, function* () {
    const packageJson = fs_extra_1.default.readJsonSync('./package.json');
    // Handle package.json
    handlePackageJsonFiles(packageJson, false);
    fs_extra_1.default.writeJsonSync('./package.json', packageJson, { spaces: 2 });
    // Remove all files ignored by Git
    if (fs_extra_1.default.existsSync('.git')) {
        const { code, stderr } = yield (0, execQuick_1.default)('git clean -Xdf');
        if (code !== 0) {
            throw new Error(`Command executed failed: git clean -Xdf\n${stderr}`);
        }
    }
    // Remove package-lock、yarn.lock、.git
    ['package-lock.json', 'yarn.lock', '.git', 'arco.config.js'].forEach((file) => fs_extra_1.default.removeSync(file));
    // Rename .gitignore to gitignore, otherwise it will not be uploaded to NPM
    if (fs_extra_1.default.existsSync('.gitignore')) {
        fs_extra_1.default.moveSync('.gitignore', 'gitignore');
    }
    // Replace constant
    yield new Promise((resolve, reject) => {
        gulp_1.default
            .src(['**/*', '.config/*', '.storybook/*'], {
            base: root,
            allowEmpty: true,
        })
            .pipe((0, gulp_replace_1.default)(packageJson.name, PLACEHOLDER_PACKAGE_NAME))
            .pipe(gulp_1.default.dest(root))
            .on('end', resolve)
            .on('error', reject);
    });
});
exports.transformToTemplate = transformToTemplate;
