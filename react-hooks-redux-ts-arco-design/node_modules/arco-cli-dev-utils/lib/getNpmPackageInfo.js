"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const execQuick_1 = __importDefault(require("./execQuick"));
const getGlobalInfo_1 = __importDefault(require("./getGlobalInfo"));
exports.default = (packageName = '') => __awaiter(void 0, void 0, void 0, function* () {
    if (!packageName) {
        try {
            // hack, It doesn't work in some users' environments without parameter packageName
            packageName = fs_extra_1.default.readJsonSync('./package.json').name;
        }
        catch (error) {
            return { error };
        }
    }
    const hostNPM = (0, getGlobalInfo_1.default)().host.npm;
    const isWin32 = process.platform === 'win32';
    const npmCommander = isWin32 ? 'npm.cmd' : 'npm';
    const { code, stdout, stderr } = yield (0, execQuick_1.default)(`${npmCommander} view ${packageName} --registry ${hostNPM} --json`);
    if (code !== 0) {
        throw new Error(stderr);
    }
    return JSON.parse(stdout);
});
