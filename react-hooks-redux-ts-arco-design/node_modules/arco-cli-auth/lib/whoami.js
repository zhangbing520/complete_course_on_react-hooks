"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const arco_cli_dev_utils_1 = require("arco-cli-dev-utils");
const utils_1 = require("./utils");
const locale_1 = __importDefault(require("./locale"));
exports.default = () => __awaiter(void 0, void 0, void 0, function* () {
    const _isLogin = yield (0, utils_1.isLogin)();
    if (_isLogin) {
        const { userInfo } = (0, arco_cli_dev_utils_1.getGlobalInfo)();
        (0, arco_cli_dev_utils_1.print)(locale_1.default.TIP_USER_INFO);
        (0, arco_cli_dev_utils_1.print)(userInfo);
    }
    else {
        arco_cli_dev_utils_1.print.error(locale_1.default.TIP_USER_INFO_ERROR);
    }
});
