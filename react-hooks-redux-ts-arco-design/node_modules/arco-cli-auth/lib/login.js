"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const http_1 = __importDefault(require("http"));
const open_1 = __importDefault(require("open"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const connect_1 = __importDefault(require("connect"));
const nanoid_1 = require("nanoid");
const arco_cli_dev_utils_1 = require("arco-cli-dev-utils");
const locale_1 = __importDefault(require("./locale"));
const request_1 = __importDefault(require("./request"));
const utils_1 = require("./utils");
const LOCAL_LISTEN_SERVER_PATH = '/login_result';
const LOCAL_LISTEN_SERVER_PORT = 3333;
// Avoid calling this function in a loop to report errors
let isWaiting = false;
const loginSuccessPage = fs_extra_1.default.readFileSync(path_1.default.resolve(__dirname, '../template/success.html'));
exports.default = ({ successHTMLString = loginSuccessPage.toString() } = {}) => __awaiter(void 0, void 0, void 0, function* () {
    if (isWaiting) {
        isWaiting = true;
        return;
    }
    const _isLogin = yield (0, utils_1.isLogin)();
    if (_isLogin) {
        arco_cli_dev_utils_1.print.warn(locale_1.default.TIP_ALREADY_LOGIN);
    }
    else {
        (0, arco_cli_dev_utils_1.print)(locale_1.default.TIP_LOGIN_ING);
        // Monitor the login result, jump to the login result page
        let httpServer;
        const userInfo = yield new Promise((resolve, reject) => {
            const app = (0, connect_1.default)();
            const token = (0, nanoid_1.nanoid)();
            app.use(LOCAL_LISTEN_SERVER_PATH, (_, res, next) => __awaiter(void 0, void 0, void 0, function* () {
                try {
                    (0, arco_cli_dev_utils_1.writeGlobalInfo)({ 'x-arco-token': token });
                    const { result } = yield request_1.default.get('userInfo');
                    res.end(successHTMLString);
                    resolve(result);
                }
                catch (err) {
                    next(err);
                }
            }));
            httpServer = http_1.default.createServer(app).listen(LOCAL_LISTEN_SERVER_PORT);
            request_1.default
                .get('login', {
                headers: {
                    'x-arco-token': token,
                    referer: `http://localhost:${LOCAL_LISTEN_SERVER_PORT}${LOCAL_LISTEN_SERVER_PATH}`,
                },
            })
                .then((res) => {
                const { result } = res;
                (0, arco_cli_dev_utils_1.print)(`${locale_1.default.TIP_VERIFY_IN_BROWSER}${result.redirectUrl} \n`);
                (0, open_1.default)(result.redirectUrl);
            })
                .catch((err) => {
                reject(err);
                arco_cli_dev_utils_1.print.error(err);
            });
        });
        (0, arco_cli_dev_utils_1.writeGlobalInfo)({ userInfo });
        arco_cli_dev_utils_1.print.success(`${locale_1.default.TIP_LOGIN_SUCCESS}${userInfo.username}`);
        httpServer && httpServer.close();
    }
    isWaiting = false;
});
