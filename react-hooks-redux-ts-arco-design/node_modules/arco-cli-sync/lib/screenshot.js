"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const resolve_global_1 = __importDefault(require("resolve-global"));
const locale_1 = __importDefault(require("./locale"));
const TIMEOUT = 10 * 1000;
/**
 * Auto screenshot
 * @param url URL of material preview page
 * @param path Path to save screenshot
 * @param selector Selector of DOM to screenshot
 * @returns {Promise<void>}
 */
function default_1({ url, path, selector }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (url) {
            let puppeteer;
            try {
                puppeteer = require((0, resolve_global_1.default)('puppeteer'));
            }
            catch (e) {
                throw new Error(locale_1.default.ERROR_NEED_PUPPETEER);
            }
            const browser = yield puppeteer.launch({
                width: 1300,
            });
            const page = yield browser.newPage();
            yield page.goto(url, { timeout: TIMEOUT });
            const screenElement = yield page.waitForSelector(selector, { timeout: TIMEOUT });
            yield screenElement.screenshot({ path });
            yield browser.close();
        }
    });
}
exports.default = default_1;
