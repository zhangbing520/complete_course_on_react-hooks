"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryAutoLinkGroup = exports.linkGroup = exports.queryJoinedGroups = exports.deleteGroupMember = exports.addGroupMember = exports.queryGroup = exports.listAllGroups = void 0;
const chalk_1 = __importDefault(require("chalk"));
const inquirer_1 = __importDefault(require("inquirer"));
const arco_cli_dev_utils_1 = require("arco-cli-dev-utils");
const arco_cli_auth_1 = require("arco-cli-auth");
const locale_1 = __importDefault(require("./locale"));
function listAllGroups() {
    return __awaiter(this, void 0, void 0, function* () {
        yield queryGroup();
    });
}
exports.listAllGroups = listAllGroups;
function queryGroup(id) {
    return __awaiter(this, void 0, void 0, function* () {
        const queryParams = {};
        if (id !== undefined) {
            queryParams.id = +id;
        }
        const { result: groups } = yield arco_cli_auth_1.request.post('group', queryParams);
        if (groups.length) {
            groups.forEach((group) => {
                arco_cli_dev_utils_1.print.success(`\n${group.name}: `);
                group.members.forEach((member, index) => {
                    (0, arco_cli_dev_utils_1.print)(chalk_1.default.green(`${index + 1}.`), member.name, chalk_1.default.green(member.role));
                });
            });
        }
        else {
            arco_cli_dev_utils_1.print.warn(`Group ${id} not found`);
        }
    });
}
exports.queryGroup = queryGroup;
function addGroupMember(id) {
    return __awaiter(this, void 0, void 0, function* () {
        const questions = [
            {
                type: 'input',
                name: 'username',
                message: locale_1.default.TIP_ADD_GROUP_MEMBER,
            },
            {
                type: 'list',
                name: 'role',
                choices: [
                    {
                        name: locale_1.default.LABEL_GROUP_OWNER,
                        value: 'owner',
                    },
                    {
                        name: locale_1.default.LABEL_GROUP_MASTER,
                        value: 'master',
                    },
                ],
            },
        ];
        const { username, role } = yield inquirer_1.default.prompt(questions);
        try {
            const { ok, msg } = yield arco_cli_auth_1.request.post('group/update', {
                id: Number(id),
                members: {
                    username,
                    role,
                },
            });
            if (ok) {
                arco_cli_dev_utils_1.print.success(`${locale_1.default.TIP_ADD_GROUP_MEMBER_SUCCESS}${username}`);
            }
            else if (msg) {
                arco_cli_dev_utils_1.print.error(`${locale_1.default.TIP_ADD_GROUP_MEMBER_FAIL}${username}`);
                arco_cli_dev_utils_1.print.error(msg);
            }
        }
        catch (err) {
            arco_cli_dev_utils_1.print.error(err);
        }
    });
}
exports.addGroupMember = addGroupMember;
function deleteGroupMember(id) {
    return __awaiter(this, void 0, void 0, function* () {
        const questions = [
            {
                type: 'input',
                name: 'username',
                message: locale_1.default.TIP_REMOVE_GROUP_MEMBER,
            },
        ];
        const { username } = yield inquirer_1.default.prompt(questions);
        try {
            const { ok, msg } = yield arco_cli_auth_1.request.post('group/update', {
                id: Number(id),
                members: {
                    username,
                    remove: true,
                },
            });
            if (ok) {
                arco_cli_dev_utils_1.print.success(`${locale_1.default.TIP_REMOVE_GROUP_MEMBER_SUCCESS}${username}`);
            }
            else if (msg) {
                arco_cli_dev_utils_1.print.error(`${locale_1.default.TIP_REMOVE_GROUP_MEMBER_FAIL}${username}`);
                arco_cli_dev_utils_1.print.error(msg);
            }
        }
        catch (err) {
            arco_cli_dev_utils_1.print.error(err);
        }
    });
}
exports.deleteGroupMember = deleteGroupMember;
function queryJoinedGroups(username) {
    return __awaiter(this, void 0, void 0, function* () {
        const { result: groups } = yield arco_cli_auth_1.request.post('group', {
            member: username ? [username] : [],
        });
        return groups;
    });
}
exports.queryJoinedGroups = queryJoinedGroups;
function linkGroup(id) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const changeGlobalInfo = (groupId, groupName) => {
            (0, arco_cli_dev_utils_1.writeGlobalInfo)({ group: groupId });
            arco_cli_dev_utils_1.print.success(groupId
                ? locale_1.default.TIP_LINK_GROUP_SUCCESS.replace('$groupName', groupName || `${groupId}`)
                : locale_1.default.TIP_UNLINK_GROUP_SUCCESS);
        };
        // Unlink group
        if (id === 0) {
            changeGlobalInfo(null);
            return;
        }
        const { userInfo } = (0, arco_cli_dev_utils_1.getGlobalInfo)();
        const joinedGroups = yield queryJoinedGroups(userInfo === null || userInfo === void 0 ? void 0 : userInfo.username);
        // Link a specific group
        if (typeof id === 'number') {
            const targetGroup = joinedGroups.find(({ id: groupId }) => groupId === id);
            if (targetGroup) {
                changeGlobalInfo(id, targetGroup.name);
            }
            else {
                arco_cli_dev_utils_1.print.error(locale_1.default.TIP_NOT_MEMBER_OF_GROUP);
            }
            return;
        }
        // Link a joined group
        switch (joinedGroups.length) {
            case 0: {
                arco_cli_dev_utils_1.print.error(locale_1.default.TIP_NO_GROUP_JOINED);
                return;
            }
            case 1: {
                const { id: groupId, name: groupName } = joinedGroups[0];
                const { result } = yield inquirer_1.default.prompt({
                    type: 'confirm',
                    name: 'result',
                    message: locale_1.default.TIP_LINK_THE_ONLY_GROUP_JOINED.replace('$groupName', groupName),
                    default: true,
                });
                if (result) {
                    changeGlobalInfo(groupId, groupName);
                }
                return;
            }
            default: {
                const { groupId } = yield inquirer_1.default.prompt({
                    type: 'list',
                    name: 'groupId',
                    message: locale_1.default.PREFIX_LINK_GROUPS_JOINED,
                    choices: joinedGroups.map(({ id, name }) => ({ name, value: id })),
                });
                if (groupId) {
                    changeGlobalInfo(groupId, (_a = joinedGroups.find(({ id }) => groupId === id)) === null || _a === void 0 ? void 0 : _a.name);
                }
            }
        }
    });
}
exports.linkGroup = linkGroup;
function tryAutoLinkGroup() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const { userInfo, group: linkedGroupId } = yield (0, arco_cli_dev_utils_1.getGlobalInfo)();
            if (userInfo === null || userInfo === void 0 ? void 0 : userInfo.username) {
                const joinedGroup = yield queryJoinedGroups(userInfo.username);
                if (joinedGroup && joinedGroup.length) {
                    const { id, name } = joinedGroup[0];
                    if (id !== linkedGroupId) {
                        const { result } = yield inquirer_1.default.prompt({
                            type: 'confirm',
                            name: 'result',
                            message: locale_1.default.TIP_LINK_GROUP_AFTER_LOGIN.replace('$groupName', name),
                            default: true,
                        });
                        if (result) {
                            (0, arco_cli_dev_utils_1.writeGlobalInfo)({ group: id });
                            arco_cli_dev_utils_1.print.success(locale_1.default.TIP_LINK_GROUP_SUCCESS.replace('$groupName', name));
                        }
                    }
                }
            }
        }
        catch (e) { }
    });
}
exports.tryAutoLinkGroup = tryAutoLinkGroup;
