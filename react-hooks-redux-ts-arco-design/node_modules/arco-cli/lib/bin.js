#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const commander_1 = __importDefault(require("commander"));
const arco_cli_init_1 = __importDefault(require("arco-cli-init"));
const arco_cli_sync_1 = __importDefault(require("arco-cli-sync"));
const arco_cli_publish_1 = __importDefault(require("arco-cli-publish"));
const arco_cli_generate_1 = __importDefault(require("arco-cli-generate"));
const arco_cli_create_template_1 = __importDefault(require("arco-cli-create-template"));
const arco_cli_dev_utils_1 = require("arco-cli-dev-utils");
const arco_cli_auth_1 = require("arco-cli-auth");
const locale_1 = __importDefault(require("./locale"));
const preview_1 = __importDefault(require("./preview"));
const subCommands_1 = __importDefault(require("./subCommands"));
const utils_1 = require("./utils");
const group_1 = require("./group");
const env_1 = require("./env");
const locales_1 = require("./locales");
const teaLog_1 = __importDefault(require("./teaLog"));
const { version: ARCO_CLI_VERSION } = require('../package.json');
global.ARCO_CLI_VERSION = ARCO_CLI_VERSION;
const VALID_SUBCOMMANDS = [
    'init',
    'generate',
    'publish',
    'sync',
    'login',
    'logout',
    'whoami',
    'group',
    'block',
    'preview',
    'template',
    'env',
    'locale',
];
function registerCommand() {
    commander_1.default
        .name('arco')
        .usage('[commands] [options]')
        .arguments('<cmd>')
        .action((cmd) => {
        if (VALID_SUBCOMMANDS.indexOf(cmd) === -1) {
            arco_cli_dev_utils_1.print.error('arco', 'Invalid command...');
            commander_1.default.help();
        }
    });
    commander_1.default.option('-v, --version', locale_1.default.CMD_DES_VERSION, () => __awaiter(this, void 0, void 0, function* () {
        (0, arco_cli_dev_utils_1.print)(chalk_1.default.green(locale_1.default.PREFIX_CURRENT_VERSION), ARCO_CLI_VERSION);
        const latestVersion = yield (0, utils_1.fetchLatestVersion)();
        if (latestVersion) {
            (0, arco_cli_dev_utils_1.print)();
            if (latestVersion !== ARCO_CLI_VERSION) {
                arco_cli_dev_utils_1.print.warn(`${locale_1.default.PREFIX_LATEST_VERSION}${latestVersion}`);
                arco_cli_dev_utils_1.print.warn(locale_1.default.TIP_VERSION_UPDATE);
            }
            else {
                (0, arco_cli_dev_utils_1.print)(chalk_1.default.cyan(locale_1.default.TIP_VERSION_ALREADY_LATEST));
            }
        }
    }));
    commander_1.default
        .command('env')
        .description(locale_1.default.CMD_DES_ENV)
        .option('-s, --switch', locale_1.default.TIP_ENV_SWITCH)
        .action(({ switch: sw }) => {
        if (sw) {
            (0, env_1.switchEnv)();
        }
        else {
            (0, env_1.printEnv)();
        }
    });
    commander_1.default
        .command('locale')
        .description(locale_1.default.CMD_DES_LOCALE)
        .option('-s, --switch', locale_1.default.TIP_LOCALE_SWITCH)
        .action(({ switch: sw }) => {
        if (sw) {
            (0, locales_1.switchLocale)();
        }
        else {
            (0, locales_1.printLocale)();
        }
    });
    commander_1.default
        .command('init <projectName>')
        .description(locale_1.default.CMD_DES_INIT)
        .option('-t, --template [packageName]', locale_1.default.TIP_INIT_FROM_TEMPLATE)
        .option('-m, --monorepo', locale_1.default.TIP_INIT_FOR_MONOREPO)
        .option('-p, --pure', locale_1.default.TIP_INIT_PURE)
        .action((name, { template, monorepo, pure }) => {
        (0, arco_cli_init_1.default)({
            template,
            projectName: name,
            isForMonorepo: !!monorepo,
            isPureProject: !!pure,
        });
    });
    commander_1.default
        .command('generate')
        .description(locale_1.default.CMD_DES_GENERATE)
        .option('--from-current-package', locale_1.default.TIP_GENERATE_FROM_CURRENT_PACKAGE)
        .action(({ fromCurrentPackage }) => {
        (0, arco_cli_generate_1.default)({ paths: fromCurrentPackage ? process.cwd() : undefined });
    });
    commander_1.default
        .command('publish')
        .description(locale_1.default.CMD_DES_PUBLISH)
        .action(() => __awaiter(this, void 0, void 0, function* () {
        yield (0, arco_cli_publish_1.default)();
    }));
    commander_1.default
        .command('sync')
        .description(locale_1.default.CMD_DES_SYNC)
        // TODO rewrite this command
        // .option('-s, --screenshot [screenshotPath]', locale.TIP_SYNC_SCREENSHOT)
        .option('--from-current-package', locale_1.default.TIP_SYNC_FROM_CURRENT_PACKAGE)
        .option('--fetch', locale_1.default.TIP_SYNC_FETCH)
        .action(({ screenshot, fromCurrentPackage, fetch }) => __awaiter(this, void 0, void 0, function* () {
        yield (0, arco_cli_sync_1.default)({ screenshot, fetch, paths: fromCurrentPackage ? process.cwd() : undefined });
        process.exit(0);
    }));
    commander_1.default
        .command('preview')
        .description(locale_1.default.CMD_DES_PREVIEW)
        .option('-p, --port [port]', locale_1.default.TIP_PREVIEW_PORT)
        .option('--path [path]', locale_1.default.TIP_PREVIEW_PATH)
        .option('--teamSite', locale_1.default.TIP_PREVIEW_TEAM_SITE)
        .action(({ port, path, teamSite }) => {
        (0, preview_1.default)({ port, path, teamSite });
    });
    commander_1.default
        .command('login')
        .description(locale_1.default.CMD_DES_LOGIN)
        .action(() => __awaiter(this, void 0, void 0, function* () {
        yield (0, arco_cli_auth_1.login)();
        yield (0, group_1.tryAutoLinkGroup)();
    }));
    commander_1.default.command('logout').description(locale_1.default.CMD_DES_LOGOUT).action(arco_cli_auth_1.logout);
    commander_1.default.command('whoami').description(locale_1.default.CMD_DES_WHOAMI).action(arco_cli_auth_1.whoami);
    commander_1.default
        .command('group')
        .description(locale_1.default.CMD_DES_GROUP)
        .option('--id <groupId>', locale_1.default.TIP_GROUP_QUERY_WITH_ID)
        .option('--add <groupId>', locale_1.default.TIP_GROUP_ADD_MEMBER)
        .option('--delete <groupId>', locale_1.default.TIP_GROUP_REMOVE_MEMBER)
        .option('--link [groupId]', locale_1.default.TIP_GROUP_LINK)
        .action(({ id: idQuery, add: idAdd, delete: idDelete, link: idLink }) => __awaiter(this, void 0, void 0, function* () {
        yield (0, arco_cli_auth_1.checkLogin)();
        if (idQuery) {
            yield (0, group_1.queryGroup)(idQuery);
        }
        else if (idAdd) {
            yield (0, group_1.addGroupMember)(idAdd);
        }
        else if (idDelete) {
            yield (0, group_1.deleteGroupMember)(idDelete);
        }
        else if (idLink) {
            yield (0, group_1.linkGroup)(typeof idLink === 'string' ? +idLink : null);
        }
        else {
            yield (0, group_1.listAllGroups)();
        }
    }));
    commander_1.default
        .command('template')
        .description(locale_1.default.CMD_DES_TEMPLATE)
        .option('--create', locale_1.default.TIP_TEMPLATE_CREATE)
        .action(({ create }) => {
        if (create) {
            (0, arco_cli_create_template_1.default)();
        }
        else {
            commander_1.default.help();
        }
    });
    // SubCommands
    Object.entries(subCommands_1.default).forEach(([subCommand, { desc, executableFile }]) => {
        commander_1.default.command(subCommand, desc, { executableFile });
    });
    commander_1.default.on('--help', function () {
        arco_cli_dev_utils_1.print.divider();
        (0, arco_cli_dev_utils_1.print)(locale_1.default.TIP_SHOW_HELP);
        (0, arco_cli_dev_utils_1.print)('Examples:');
        (0, arco_cli_dev_utils_1.print)('  $ arco env -h');
        (0, arco_cli_dev_utils_1.print)('  $ arco sync -h');
        arco_cli_dev_utils_1.print.divider();
    });
}
(0, utils_1.printLogo)();
registerCommand();
(0, teaLog_1.default)({
    args: process.argv.slice(2).join(' '),
});
if (process.argv[2] !== 'env' && (0, env_1.checkEnv)() === false) {
    (0, env_1.switchEnv)()
        .then(() => {
        commander_1.default.parse(process.argv);
    })
        .catch((err) => {
        arco_cli_dev_utils_1.print.error(err);
        process.exit(0);
    });
}
else {
    commander_1.default.parse(process.argv);
}
