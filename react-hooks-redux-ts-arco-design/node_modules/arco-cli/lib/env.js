"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.switchEnv = exports.printEnv = exports.checkEnv = void 0;
const axios_1 = __importDefault(require("axios"));
const arco_cli_dev_utils_1 = require("arco-cli-dev-utils");
const inquirer_1 = __importDefault(require("inquirer"));
const locale_1 = __importDefault(require("./locale"));
function checkEnv() {
    const globalInfo = (0, arco_cli_dev_utils_1.getGlobalInfo)();
    return !!(globalInfo && globalInfo.host);
}
exports.checkEnv = checkEnv;
function printEnv() {
    const globalInfo = (0, arco_cli_dev_utils_1.getGlobalInfo)();
    if (globalInfo && globalInfo.env) {
        (0, arco_cli_dev_utils_1.print)(`${locale_1.default.PREFIX_CURRENT_ENV}${globalInfo.env === 'private' ? locale_1.default.LABEL_ENV_PRIVATE : locale_1.default.LABEL_ENV_PUBLIC}`);
    }
    else {
        arco_cli_dev_utils_1.print.error(locale_1.default.TIP_NO_ENV_SET);
    }
}
exports.printEnv = printEnv;
function switchEnv() {
    return __awaiter(this, void 0, void 0, function* () {
        const { data: { result: hostInfo }, } = yield axios_1.default.get('https://arco.design/material/api/getHostInfo');
        const { env } = yield inquirer_1.default.prompt({
            type: 'list',
            name: 'env',
            message: locale_1.default.TIP_SELECT_ENV,
            choices: [
                { name: locale_1.default.TIP_ENV_PUBLIC, value: 'public' },
                { name: locale_1.default.TIP_ENV_PRIVATE, value: 'private' },
            ],
        });
        if (hostInfo[env]) {
            // Switch env and clear user info
            (0, arco_cli_dev_utils_1.writeGlobalInfo)({
                env,
                host: hostInfo[env],
                'x-arco-token': null,
                userInfo: null,
                group: null,
            });
            arco_cli_dev_utils_1.print.success(env === 'private' ? locale_1.default.TIP_SWITCH_SUCCESS_TO_PRIVATE : locale_1.default.TIP_SWITCH_SUCCESS_TO_PUBLIC);
        }
        else {
            arco_cli_dev_utils_1.print.error('[arco env]', 'failed to get host info.');
        }
    });
}
exports.switchEnv = switchEnv;
