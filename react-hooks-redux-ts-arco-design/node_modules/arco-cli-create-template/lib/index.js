"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const ora_1 = __importDefault(require("ora"));
const inquirer_1 = __importDefault(require("inquirer"));
const arco_cli_dev_utils_1 = require("arco-cli-dev-utils");
const locale_1 = __importDefault(require("./locale"));
const { transformToTemplate } = arco_cli_dev_utils_1.materialTemplate;
const TEMPLATE_DIR = 'template';
const TEMPLATE_DIR_FOR_MONOREPO = 'template-for-monorepo';
const PACKAGE_JSON = {
    name: '',
    version: '1.0.0',
    description: '',
    files: ['hook', TEMPLATE_DIR, TEMPLATE_DIR_FOR_MONOREPO],
    license: 'MIT',
    dependencies: {
        'arco-cli-dev-utils': '^1.6.0',
    },
};
function default_1() {
    return __awaiter(this, void 0, void 0, function* () {
        const spinner = (0, ora_1.default)();
        const cwdPath = process.cwd();
        const { projectPath, templatePath } = yield inquirer_1.default.prompt([
            {
                type: 'input',
                name: 'projectPath',
                message: locale_1.default.TIP_INPUT_PROJECT_PATH,
            },
            {
                type: 'input',
                name: 'templatePath',
                message: locale_1.default.TIP_INPUT_TEMPLATE_PATH,
            },
        ]);
        if (!(yield (0, arco_cli_dev_utils_1.confirm)(() => fs_extra_1.default.pathExistsSync(templatePath), `${locale_1.default.WARN_PATH_ALREADY_EXIST} ${arco_cli_dev_utils_1.print.chalk.yellow(templatePath)} `))) {
            process.exit(0);
        }
        const { isForMonorepo } = yield inquirer_1.default.prompt({
            type: 'confirm',
            name: 'isForMonorepo',
            message: locale_1.default.TIP_IS_FOR_MONOREPO,
            default: false,
        });
        const templateFilePath = path_1.default.resolve(templatePath, isForMonorepo ? TEMPLATE_DIR_FOR_MONOREPO : TEMPLATE_DIR);
        // Initialize the template directory structure
        fs_extra_1.default.ensureDirSync(templatePath);
        const packageJsonPath = path_1.default.resolve(templatePath, 'package.json');
        if (!fs_extra_1.default.existsSync(packageJsonPath)) {
            const { packageName } = yield inquirer_1.default.prompt({
                type: 'input',
                name: 'packageName',
                message: locale_1.default.TIP_INPUT_PACKAGE_NAME,
            });
            fs_extra_1.default.writeJsonSync(packageJsonPath, Object.assign(Object.assign({}, PACKAGE_JSON), { name: packageName }), { spaces: 2 });
        }
        // Copy project content
        try {
            spinner.start(locale_1.default.TIP_TEMPLATE_COPY_ING);
            fs_extra_1.default.emptyDirSync(templateFilePath);
            yield fs_extra_1.default.copy(projectPath, templateFilePath);
            spinner.succeed(locale_1.default.TIP_TEMPLATE_COPY_DONE);
        }
        catch (err) {
            spinner.fail(locale_1.default.TIP_TEMPLATE_COPY_FAILED);
            arco_cli_dev_utils_1.print.error(err);
            process.exit(1);
        }
        process.chdir(templateFilePath);
        // Transform project to template
        try {
            spinner.start(locale_1.default.TIP_TEMPLATE_ADAPT_ING);
            yield transformToTemplate({ root: templateFilePath });
            spinner.succeed(locale_1.default.TIP_TEMPLATE_ADAPT_DONE);
        }
        catch (err) {
            spinner.fail(locale_1.default.TIP_TEMPLATE_ADAPT_FAILED);
            arco_cli_dev_utils_1.print.error(err);
            process.exit(1);
        }
        process.chdir(cwdPath);
    });
}
exports.default = default_1;
