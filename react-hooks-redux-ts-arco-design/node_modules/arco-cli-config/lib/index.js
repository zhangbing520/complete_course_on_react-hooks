"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = exports.initConfig = void 0;
const path_1 = __importDefault(require("path"));
const glob_1 = __importDefault(require("glob"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const arco_cli_dev_utils_1 = require("arco-cli-dev-utils");
const defaultConfig = require('../template/config');
const DEFAULT_FILE_NAME = 'arco.config';
const initConfig = (fileName = DEFAULT_FILE_NAME) => {
    const root = (0, arco_cli_dev_utils_1.getGitRootPath)();
    const configFilePath = path_1.default.resolve(root, `${fileName}.js`);
    const defaultConfigFilePath = path_1.default.resolve(__dirname, '../template/config.js');
    if (root && !fs_extra_1.default.existsSync(configFilePath)) {
        fs_extra_1.default.copySync(defaultConfigFilePath, configFilePath);
        return true;
    }
};
exports.initConfig = initConfig;
const getConfig = (fileName = DEFAULT_FILE_NAME, root = (0, arco_cli_dev_utils_1.getGitRootPath)()) => {
    const configFilePath = path_1.default.resolve(root, `${fileName}.js`);
    let config = Object.assign({}, defaultConfig);
    if (root && fs_extra_1.default.existsSync(configFilePath)) {
        try {
            config = Object.assign({}, require(configFilePath));
        }
        catch (e) { }
    }
    // Transform packages glob configured in arco.config.js into a path array
    if (!Array.isArray(config.packages) || !config.packages.length) {
        // When the config.packages field does not exist, try to use the workspaces field in package.json
        try {
            config.packages = fs_extra_1.default.readJsonSync(path_1.default.resolve(root, 'package.json')).workspaces;
        }
        catch (e) { }
        // Try to read the packages field from the lerna configuration
        if (!config.packages) {
            try {
                config.packages = fs_extra_1.default.readJsonSync(path_1.default.resolve(root, 'lerna.json')).packages;
            }
            catch (e) { }
        }
    }
    if (Array.isArray(config.packages) && config.packages.length) {
        let paths = [];
        config.packages.forEach((p) => (paths = paths.concat(glob_1.default.sync(`${root}/${p}`))));
        config.packages = paths;
    }
    else {
        config.packages = [root];
    }
    return config;
};
exports.getConfig = getConfig;
