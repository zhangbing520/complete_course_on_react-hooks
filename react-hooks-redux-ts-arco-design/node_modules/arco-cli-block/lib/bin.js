#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const axios_1 = __importDefault(require("axios"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const commander_1 = __importDefault(require("commander"));
const nanoid_1 = require("nanoid");
const arco_cli_config_1 = require("arco-cli-config");
const arco_cli_dev_utils_1 = require("arco-cli-dev-utils");
const main_1 = require("./main");
const locale_1 = __importDefault(require("./locale"));
// Source path of page material (relative to src)
const PATH_PAGE_SOURCE = './page';
// Source path of block material (relative to src)
const PATH_BLOCK_SOURCE = './lib';
// Default insert path for page material (relative to src)
const DEFAULT_PATH_PAGE_INSERT = 'pages';
function getDirName(pkgName) {
    return pkgName.split('/')[1];
}
/**
 * Get meta info for page/block material
 */
function getMeta(pkgName) {
    return __awaiter(this, void 0, void 0, function* () {
        let arcoMeta = null;
        let pageMeta = null;
        const urlPrefix = `${(0, arco_cli_dev_utils_1.getGlobalInfo)().host.unpkg}/${pkgName}`;
        try {
            arcoMeta = (yield axios_1.default.get(`${urlPrefix}/package.json`)).data.arcoMeta;
        }
        catch (e) { }
        try {
            pageMeta = (yield axios_1.default.get(`${urlPrefix}/pageMeta.json`)).data;
        }
        catch (e) { }
        return { arcoMeta, pageMeta };
    });
}
commander_1.default
    .command('use <pkgName>')
    .description(locale_1.default.CMD_DES)
    .action((packageName) => __awaiter(void 0, void 0, void 0, function* () {
    const projectDir = (0, arco_cli_dev_utils_1.getGitRootPath)();
    const { arcoMeta, pageMeta } = yield getMeta(packageName);
    if (!arcoMeta) {
        arco_cli_dev_utils_1.print.error('[arco block]', locale_1.default.ERROR_NO_VALID_PACKAGE);
        process.exit();
    }
    const isPage = arcoMeta.type === 'react-page';
    const isBlock = arcoMeta.type === 'react-block';
    if (!isPage && !isBlock) {
        arco_cli_dev_utils_1.print.error('[arco block]', locale_1.default.ERROR_WRONG_MATERIAL_TYPE);
        process.exit();
    }
    try {
        // Insert page for Arco Pro
        if (isPage && pageMeta) {
            const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
            const nanoid = (0, nanoid_1.customAlphabet)(alphabet, 10);
            const randomKey = nanoid();
            if (!pageMeta.componentPath) {
                arco_cli_dev_utils_1.print.error('[arco block]', locale_1.default.ERROR_NO_PAGE_MATE_COMPONENT_PATH);
                process.exit();
            }
            yield (0, main_1.arcoPageInsert)({
                packageName,
                parentKey: pageMeta.parents && pageMeta.parents[0],
                routeConfig: {
                    name: pageMeta.name || randomKey,
                    key: pageMeta.key || randomKey,
                    componentPath: pageMeta.componentPath,
                },
            }, { rootPath: projectDir, silent: false });
        }
        else {
            const { pathBlockInsert } = (0, arco_cli_config_1.getConfig)();
            const targetDir = isBlock && pathBlockInsert ? pathBlockInsert : DEFAULT_PATH_PAGE_INSERT;
            fs_extra_1.default.ensureDirSync(targetDir);
            yield (0, main_1.arcoBlockInsert)({
                packageName,
                // The location of the target file, relative path to the project's /src
                targetPath: path_1.default.join(targetDir, getDirName(packageName)),
                // The location of the source file, relative path to the npm package
                sourcePath: isBlock ? PATH_BLOCK_SOURCE : PATH_PAGE_SOURCE,
            }, { rootPath: projectDir, silent: false });
        }
        arco_cli_dev_utils_1.print.success('[arco block]', locale_1.default.TIP_INSTALL_SUCCESS);
    }
    catch (err) {
        if (err.response && err.response.status === 404) {
            arco_cli_dev_utils_1.print.error('[arco block]', `${locale_1.default.ERROR_NO_VALID_PACKAGE} ${packageName}`);
        }
        else {
            arco_cli_dev_utils_1.print.error('[arco block]', `${locale_1.default.ERROR_INSTALL_FAIL} ${packageName}`);
        }
        throw err;
    }
}));
commander_1.default.parse(process.argv);
