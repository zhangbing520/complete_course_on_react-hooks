"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatCodeWithPrettierAndEslint = exports.stringifyError = exports.installDependency = exports.getDependenceNameAndVersion = exports.getNewDependencies = exports.getExistingDependencies = exports.wgetAsync = exports.getNpmTarSrc = exports.getPackageScopeAndName = exports.DefaultLogger = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const axios_1 = __importDefault(require("axios"));
const wget_improved_1 = __importDefault(require("wget-improved"));
const child_process_1 = require("child_process");
const eslint_1 = require("eslint");
const prettier = __importStar(require("prettier"));
const ora_1 = __importDefault(require("ora"));
const arco_cli_dev_utils_1 = require("arco-cli-dev-utils");
/**
 * Default logger implementation with ora
 */
class DefaultLogger {
    constructor(startText) {
        this._spinner = (0, ora_1.default)(startText).start();
    }
    log(text, color) {
        if (color) {
            this._spinner.color = color;
        }
        this._spinner.text = text;
    }
    succeed(text) {
        this._spinner.succeed(text);
    }
    fail(text) {
        this._spinner.fail(text);
    }
}
exports.DefaultLogger = DefaultLogger;
/**
 * Get the scope and name of the NPM package
 */
function getPackageScopeAndName(npmName) {
    const segIndex = npmName.indexOf('/');
    const scope = npmName.substr(0, segIndex) || '';
    const name = npmName.substr(segIndex + 1);
    return { scope, name };
}
exports.getPackageScopeAndName = getPackageScopeAndName;
/**
 * Get the NPM package download address
 */
function getNpmTarSrc(name) {
    return __awaiter(this, void 0, void 0, function* () {
        const hostNPM = (0, arco_cli_dev_utils_1.getGlobalInfo)().host.npm;
        const { data } = yield (0, axios_1.default)({
            url: `${hostNPM}${name}`,
            method: 'GET',
            responseType: 'json',
        });
        const version = data[`dist-tags`].latest;
        return {
            npmTarSrc: data.versions[version].dist.tarball,
            version,
        };
    });
}
exports.getNpmTarSrc = getNpmTarSrc;
/**
 * Use wget to download files
 */
function wgetAsync(src, output, options) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            const download = wget_improved_1.default.download(src, output, options);
            download.on('error', function (err) {
                reject(err);
            });
            download.on('end', function (output) {
                resolve(output);
            });
        });
    });
}
exports.wgetAsync = wgetAsync;
/**
 * Get dependencies already installed
 */
function getExistingDependencies(filePath) {
    const breakCondition = '/';
    let curPath = filePath;
    while (curPath !== breakCondition) {
        const pathPackageJson = path_1.default.resolve(curPath, 'package.json');
        if (fs_extra_1.default.existsSync(pathPackageJson)) {
            const pkg = require(path_1.default.resolve(curPath, 'package.json'));
            return pkg.dependencies || {};
        }
        curPath = path_1.default.resolve(curPath, '../');
    }
}
exports.getExistingDependencies = getExistingDependencies;
/**
 * Get dependencies need to install
 */
function getNewDependencies(existingDependencies, willInstalledDependencies) {
    const allKeys = Object.keys(willInstalledDependencies);
    const keys = allKeys.map((item) => {
        if (!existingDependencies[item]) {
            return item;
        }
    });
    return keys || [];
}
exports.getNewDependencies = getNewDependencies;
/**
 * Get the name and version of the dependent package
 */
function getDependenceNameAndVersion(dependencies, filters) {
    let dependenciesArr = [];
    const keys = Object.keys(dependencies);
    dependenciesArr = keys.map((item) => {
        if (filters.includes(item)) {
            return `${item}@${dependencies[item]}`;
        }
    });
    return dependenciesArr.join(' ').trim();
}
exports.getDependenceNameAndVersion = getDependenceNameAndVersion;
/**
 * Get the way of dependency management
 */
function getProjectPackageControlType(curPath) {
    const breakCondition = '/';
    while (curPath !== breakCondition) {
        const packageLockPath = path_1.default.resolve(curPath, 'package-lock.json');
        const yarnLockPath = path_1.default.resolve(curPath, 'yarn.lock');
        const pnpmLockPath = path_1.default.resolve(curPath, 'pnpm-lock.yaml');
        if (fs_extra_1.default.existsSync(yarnLockPath)) {
            return 'yarn';
        }
        if (fs_extra_1.default.existsSync(packageLockPath)) {
            return 'npm';
        }
        if (fs_extra_1.default.existsSync(pnpmLockPath)) {
            return 'pnpm';
        }
        curPath = path_1.default.resolve(curPath, '../');
    }
    return 'yarn';
}
/**
 * Install npm dependencies
 */
function installDependency(npmName, cwdPath, logFun) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve) => {
            const type = getProjectPackageControlType(cwdPath);
            const registry = (0, arco_cli_dev_utils_1.getGlobalInfo)().host.npm;
            // Should exec command in project root while using npm
            const ls = (0, child_process_1.exec)(type === 'yarn'
                ? `yarn add ${npmName} -S --registry=${registry}`
                : type === 'pnpm'
                    ? `pnpm add ${npmName} -P --registry=${registry}`
                    : `npm i ${npmName} -S --registry=${registry}`, type === 'npm'
                ? {
                    cwd: cwdPath,
                }
                : {});
            ls.stdout &&
                ls.stdout.on('data', function (data) {
                    logFun(data.toString());
                });
            ls.stderr &&
                ls.stderr.on('data', function (data) {
                    logFun(data.toString());
                });
            ls.on('exit', function (exitcode) {
                resolve(exitcode);
            });
        });
    });
}
exports.installDependency = installDependency;
/**
 * Format error message
 */
function stringifyError(e) {
    return `${e.message}\n${e.stack}`;
}
exports.stringifyError = stringifyError;
function formatCodeWithPrettierAndEslint(code, filename, parser) {
    return __awaiter(this, void 0, void 0, function* () {
        const resolvePrettierConfig = yield prettier.resolveConfig(filename);
        const prettierConfig = resolvePrettierConfig || {};
        prettierConfig.parser = parser || 'typescript';
        const prettyCode = prettier.format(code, prettierConfig);
        const eslinted = yield lintAndFixCode(filename, prettyCode);
        return eslinted;
    });
}
exports.formatCodeWithPrettierAndEslint = formatCodeWithPrettierAndEslint;
function lintAndFixCode(filename, source) {
    return __awaiter(this, void 0, void 0, function* () {
        const eslint = new eslint_1.ESLint({ fix: true });
        const messages = yield eslint.lintText(source, { filePath: filename });
        const lintResult = messages[0];
        return lintResult.output || source;
    });
}
