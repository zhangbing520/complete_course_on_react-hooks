"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleArcoProRedux = exports.handleArcoProMock = exports.handleArcoProI18n = exports.handleArcoProRoute = void 0;
const parser_1 = require("@babel/parser");
const t = __importStar(require("@babel/types"));
const generator_1 = __importDefault(require("@babel/generator"));
const camelcase_1 = __importDefault(require("camelcase"));
function parseWithBabel(code) {
    return (0, parser_1.parse)(code, {
        sourceType: 'module',
        plugins: ['jsx', 'decorators-legacy', 'typescript', 'classProperties', 'dynamicImport'],
    });
}
function getLastImportDeclIdx(list) {
    let i = 0;
    while (t.isImportDeclaration(list[i])) {
        ++i;
    }
    return i;
}
function findDefaultExport(list) {
    let target;
    list.forEach((node) => {
        if (t.isExportDefaultDeclaration(node)) {
            target = node;
        }
    });
    return target;
}
/**
 * Find the val of the object property with key from the object expression
 */
function getValFromObjectExpression(oe, keyname) {
    let val;
    oe.properties.forEach((o) => {
        if (t.isObjectProperty(o) && t.isIdentifier(o.key) && o.key.name === keyname) {
            val = o.value;
        }
    });
    return val;
}
/**
 * Generate a object expression from a plain js object.
 */
function genObjectExpressionFromPlainJsObj(obj) {
    const list = Object.keys(obj).map((key) => {
        return t.objectProperty(t.identifier(key), t.stringLiteral(obj[key]));
    });
    return t.objectExpression(list);
}
/**
 * Handle route info for Arco Pro
 */
function handleArcoProRoute(config) {
    const file = parseWithBabel(config.routeCode);
    let targetRouteInit;
    file.program.body.forEach((node) => {
        if (t.isExportNamedDeclaration(node) && t.isVariableDeclaration(node.declaration)) {
            if (t.isIdentifier(node.declaration.declarations[0].id) &&
                node.declaration.declarations[0].id.name === 'routes') {
                targetRouteInit = node.declaration.declarations[0].init;
            }
        }
    });
    if (!targetRouteInit) {
        throw new Error('No target route found.');
    }
    const tryToFindInsertPoint = (list, routeStr) => {
        let target;
        list.elements.forEach((oe) => {
            if (t.isObjectExpression(oe)) {
                const val = getValFromObjectExpression(oe, 'key');
                if (val && val.value === routeStr) {
                    target = oe;
                }
                const children = getValFromObjectExpression(oe, 'children');
                if (children) {
                    const findFromChildren = tryToFindInsertPoint(children, routeStr);
                    if (findFromChildren) {
                        target = oe;
                    }
                }
            }
        });
        return target;
    };
    const insertPoint = tryToFindInsertPoint(targetRouteInit, config.routeParentKey);
    const newRout = genObjectExpressionFromPlainJsObj(config.routeObj);
    if (insertPoint) {
        const children = getValFromObjectExpression(insertPoint, 'children');
        if (children) {
            children.elements.push(newRout);
        }
        else {
            insertPoint.properties.push(t.objectProperty(t.identifier('children'), t.arrayExpression([newRout])));
        }
    }
    else {
        targetRouteInit.elements.push(newRout);
    }
    return (0, generator_1.default)(file).code;
}
exports.handleArcoProRoute = handleArcoProRoute;
/**
 * Handle i18n for Arco Pro
 */
function handleArcoProI18n(config) {
    const file = parseWithBabel(config.localCode);
    const idx = getLastImportDeclIdx(file.program.body);
    const importedLocaleName = (0, camelcase_1.default)(config.pageName);
    const importSource = `../pages/${config.pageName}/locale/${config.localFileName}`;
    const newImportDecl = t.importDeclaration([t.importDefaultSpecifier(t.identifier(importedLocaleName))], t.stringLiteral(importSource));
    file.program.body.splice(idx, 0, newImportDecl);
    const defaultExport = findDefaultExport(file.program.body);
    if (!defaultExport) {
        throw new Error('No default export module found.');
    }
    defaultExport.declaration.properties.push(t.spreadElement(t.identifier(importedLocaleName)));
    return (0, generator_1.default)(file).code;
}
exports.handleArcoProI18n = handleArcoProI18n;
/**
 * Handle data mock for Arco Pro
 */
function handleArcoProMock(config) {
    const file = parseWithBabel(config.code);
    const idx = getLastImportDeclIdx(file.program.body);
    const importSource = `../pages/${config.pageName}/mock`;
    const newImportDecl = t.importDeclaration([], t.stringLiteral(importSource));
    file.program.body.splice(idx, 0, newImportDecl);
    const final = (0, generator_1.default)(file);
    return final.code;
}
exports.handleArcoProMock = handleArcoProMock;
function tryToFindReduxExportInterface(list) {
    const exportedInterfaces = list.filter((node) => {
        return t.isExportNamedDeclaration(node) && t.isTSInterfaceDeclaration(node.declaration);
    });
    if (exportedInterfaces.length === 1) {
        return exportedInterfaces[0]
            .declaration;
    }
    const findExportInterface = (list, id) => {
        let target;
        list.forEach((node) => {
            if (t.isExportNamedDeclaration(node) && t.isTSInterfaceDeclaration(node.declaration)) {
                if (node.declaration.id.name === id) {
                    target = node.declaration;
                }
            }
        });
        return target;
    };
    const target = findExportInterface(list, 'ReducerState');
    if (!target) {
        throw new Error("No export interface 'ReducerState' was found in 'redux/index.ts'.");
    }
    return target;
}
/**
 * Handle Redux for Arco Pro
 */
function handleArcoProRedux(config) {
    const importedLocalName = (0, camelcase_1.default)(config.pageName);
    const exportInterfaceName = `${importedLocalName[0].toUpperCase() + importedLocalName.slice(1)}State`;
    const file = parseWithBabel(config.code);
    const idx = getLastImportDeclIdx(file.program.body);
    const importSource = `../pages/${config.pageName}/redux/reducer`;
    const newImportDecl = t.importDeclaration([
        t.importDefaultSpecifier(t.identifier(importedLocalName)),
        t.importSpecifier(t.identifier(exportInterfaceName), t.identifier(exportInterfaceName)),
    ], t.stringLiteral(importSource));
    file.program.body.splice(idx, 0, newImportDecl);
    const exportedInterface = tryToFindReduxExportInterface(file.program.body);
    exportedInterface.body.body.push(t.tsPropertySignature(t.identifier(importedLocalName), t.tSTypeAnnotation(t.tsTypeReference(t.identifier(exportInterfaceName)))));
    const defaultExport = findDefaultExport(file.program.body);
    if (!defaultExport) {
        throw new Error('No default export module found.');
    }
    const args = defaultExport.declaration.arguments;
    args[0].properties.push(
    // "shorthand" is true
    t.objectProperty(t.identifier(importedLocalName), t.identifier(importedLocalName), false, true));
    const final = (0, generator_1.default)(file);
    return final.code;
}
exports.handleArcoProRedux = handleArcoProRedux;
