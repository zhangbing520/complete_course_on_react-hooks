interface NpmPackageManipulatorContext {
    /**
     * Root path of executing directory. Used to generate path of temp file folder.
     */
    root?: string;
    /**
     * Temp directory name.
     */
    tempDirectoryName?: string;
    /**
     * Logs during download and unzip will be printed through this function.
     */
    log: (msg: string) => void;
}
/**
 * Manipulate npm package download and dependencies installation in main project.
 *
 * @example
 * const npm = new NpmPackageManipulator(...);
 * await npm.downloadAndUnzipNpmPackage('react');
 */
export declare class NpmPackageManipulator {
    private _ctx;
    readonly _root: string;
    readonly _tempDirectoryPath: string;
    private _packageMap;
    constructor(ctx: NpmPackageManipulatorContext);
    /**
     * Download target npm package.
     */
    downloadAndUnzipNpmPackage(packageName: string): Promise<string>;
    getPackageDownloadPath(packageName: string): string;
    /**
     * The function will look up from "comparisonTargetFilePath" to find a package.json and use its dependencies
     * to generate diff deps.
     */
    getPackageDependenciesPackString(packageName: string, comparisonTargetFilePath: string): string;
    private getPackageInfo;
    clean(): Promise<void>;
    private cleanMap;
}
export {};
