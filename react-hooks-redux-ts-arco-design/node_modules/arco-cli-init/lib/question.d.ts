declare type Locale = 'zh-CN' | 'en-US';
declare type Answer = string | number | boolean;
declare type FilterPropertyRule = {
    type: 'include' | 'exclude';
    value: string[];
};
declare type Filter = {
    ENV_MONOREPO?: boolean;
    type?: FilterPropertyRule;
    framework?: FilterPropertyRule;
};
declare type Message = string | Record<Locale, string>;
declare type Question = {
    type: 'list' | 'input' | 'checkbox';
    message: Message;
    default?: Answer;
    choices?: Array<{
        label: Message;
        value: Answer;
        _filter?: Filter;
    }>;
    validate?: {
        rule: 'required';
        message: Message;
    };
};
declare type QNode = {
    _key: string;
    _filter?: Filter;
    _question: Question | QNode[];
};
export declare type InfoCollected = {
    ENV_MONOREPO: boolean;
    framework: 'react' | 'vue';
    type: 'component' | 'block' | 'page' | 'library' | 'pro' | 'monorepo';
    arcoProOptions: {
        framework: 'next' | 'vite' | 'cra';
        type: 'simple' | 'full';
    };
    meta: {
        name: string;
        title: string;
        description: string;
        version: string;
        category: string[];
    };
};
declare const DEFAULT_QUESTION_LIST: QNode[];
declare function collectInfo({ questions, baseInfo, }: {
    questions?: typeof DEFAULT_QUESTION_LIST;
    baseInfo: Partial<InfoCollected>;
}): Promise<InfoCollected>;
export default collectInfo;
