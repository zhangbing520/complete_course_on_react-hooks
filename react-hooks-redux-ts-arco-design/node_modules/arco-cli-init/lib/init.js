"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const axios_1 = __importDefault(require("axios"));
const inquirer_1 = __importDefault(require("inquirer"));
const arco_cli_config_1 = require("arco-cli-config");
const arco_cli_dev_utils_1 = require("arco-cli-dev-utils");
const arco_cli_create_project_1 = __importDefault(require("arco-cli-create-project"));
const locale_1 = __importDefault(require("./locale"));
// Available templates
// Temporarily change value of template via process.env.TEMPLATE
const TEMPLATE_PACKAGE_NAME = new Proxy({
    core: '@arco-materials/template-core',
    monorepo: '@arco-materials/template-monorepo',
    'pro-react': 'arco-design-pro',
    'pro-vue': 'arco-design-pro-vue',
    'team-site-react': '@arco-materials/template-team-site',
}, {
    get: (obj, propName) => process.env.TEMPLATE || obj[propName],
});
/**
 * Init project
 */
function default_1({ projectName, template, metaFileName = 'arcoMeta', configFileName, isForMonorepo = false, isPureProject = false, }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!projectName) {
            arco_cli_dev_utils_1.print.error(`\n${locale_1.default.ERROR_NO_PROJECT_NAME}\n`);
            process.exit(0);
        }
        if (!(yield (0, arco_cli_dev_utils_1.isGitStatusClean)())) {
            arco_cli_dev_utils_1.print.error(`\n${locale_1.default.ERROR_GIT_DIRTY}\n`);
            process.exit(0);
        }
        // project init path
        const root = path_1.default.resolve(projectName);
        if (!(yield (0, arco_cli_dev_utils_1.confirm)(() => fs_extra_1.default.pathExistsSync(root), `${locale_1.default.WARN_PATH_EXIST} ${chalk_1.default.yellow(root)}`))) {
            process.exit(0);
        }
        let createProjectOptions = {
            template: null,
        };
        if (isPureProject) {
            const { template, name } = yield inquirer_1.default.prompt([
                {
                    type: 'input',
                    name: 'template',
                    message: locale_1.default.TIP_INPUT_TEMPLATE_NAME_FOR_PURE_PROJECT,
                    // Template for Arco material team site
                    default: TEMPLATE_PACKAGE_NAME['team-site-react'],
                },
                {
                    type: 'input',
                    name: 'name',
                    message: locale_1.default.TIP_INPUT_PACKAGE_NAME_FOR_PURE_PROJECT,
                },
            ]);
            createProjectOptions = {
                template,
                packageJson: { name },
            };
        }
        else {
            const baseInfo = {
                ENV_MONOREPO: isForMonorepo,
            };
            // Try to skip select framework if in a monorepo project
            if (isForMonorepo) {
                try {
                    const pathGitRoot = (0, arco_cli_dev_utils_1.getGitRootPath)();
                    const { dependencies, devDependencies } = fs_extra_1.default.readJsonSync(path_1.default.resolve(pathGitRoot, 'package.json')) || {};
                    if ((dependencies && dependencies.react) || (devDependencies && devDependencies.react)) {
                        baseInfo.framework = 'react';
                    }
                    else if ((dependencies && dependencies.vue) || (devDependencies && devDependencies.vue)) {
                        baseInfo.framework = 'vue';
                    }
                }
                catch (error) { }
            }
            // When the user specifies a template, get meta info from package.json
            if (template) {
                try {
                    let packageJson = null;
                    if (template.startsWith('file:')) {
                        packageJson = fs_extra_1.default.readJsonSync(`${template.replace(/^file:/, '')}/package.json`);
                    }
                    else {
                        const hostUnpkg = (0, arco_cli_dev_utils_1.getGlobalInfo)().host.unpkg;
                        const { data } = yield axios_1.default.get(`${hostUnpkg}/${template}/template/package.json`);
                        packageJson = data;
                    }
                    const metaInTemplate = packageJson && packageJson[metaFileName];
                    if (metaInTemplate) {
                        baseInfo.meta = metaInTemplate;
                        baseInfo.type = metaInTemplate.type;
                    }
                }
                catch (e) { }
            }
            const infoFromUser = yield (0, arco_cli_dev_utils_1.getAnswerFromUser)({
                command: 'init',
                baseInfo,
            });
            // Material type is something like react-component/vue-component
            const materialType = baseInfo.type || `${infoFromUser.framework}-${infoFromUser.type}`;
            switch (infoFromUser.type) {
                case 'monorepo': {
                    createProjectOptions = {
                        template: TEMPLATE_PACKAGE_NAME.monorepo,
                        customInitFunctionParams: {
                            type: materialType,
                        },
                    };
                    break;
                }
                case 'pro': {
                    createProjectOptions = {
                        template: TEMPLATE_PACKAGE_NAME[`pro-${infoFromUser.framework}`],
                        beforeGitCommit: () => null,
                        customInitFunctionParams: {
                            framework: infoFromUser.arcoProOptions.framework,
                            simple: infoFromUser.arcoProOptions.type === 'simple',
                        },
                    };
                    break;
                }
                default: {
                    const _a = infoFromUser.meta, { name, version, description } = _a, rest = __rest(_a, ["name", "version", "description"]);
                    createProjectOptions = {
                        template: TEMPLATE_PACKAGE_NAME.core,
                        packageJson: {
                            name,
                            version,
                            description,
                            [metaFileName]: Object.assign({ type: materialType }, rest),
                        },
                        customInitFunctionParams: {
                            isForMonorepo,
                            type: materialType,
                            packageName: name,
                        },
                    };
                    break;
                }
            }
        }
        if (template) {
            createProjectOptions.template = template;
        }
        return (0, arco_cli_create_project_1.default)(Object.assign({ root,
            projectName,
            isForMonorepo, beforeGitCommit: () => {
                // Create arco.config.js
                if (!isPureProject && !isForMonorepo) {
                    (0, arco_cli_config_1.initConfig)(configFileName);
                }
            } }, createProjectOptions)).catch((err) => {
            arco_cli_dev_utils_1.print.error(err);
            throw err;
        });
    });
}
exports.default = default_1;
